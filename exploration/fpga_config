#!/usr/bin/env python3
# Requires 'pyusb'.

import usb.core



class CamlinkExplorer:
    """ Class for working with the Camlink exploration firmware. """

    VENDOR_ID  = 0x04b4
    PRODUCT_ID = 0x4720

    # Flash size parameteres.
    # These are forced to be fixed by Cypress.
    FLASH_SIZE         = 4194304
    FLASH_OP_SIZE      = 4096
    FLASH_SECTOR_SIZE  = 64 * 1024
    FLASH_SIZE_OPS     = FLASH_SIZE / FLASH_OP_SIZE

    # Request types used for our standard requests.
    REQUEST_TYPE_OUT = 0x40
    REQUEST_TYPE_IN  = 0xc0


    # Request numbers.
    REQUEST_READ_ID  = 0xb0

    REQUEST_SPI_FLASH_WRITE = 0xc2
    REQUEST_SPI_FLASH_READ  = 0xc3
    REQUEST_SPI_FLASH_BUSY  = 0xc4
    REQUEST_SPI_FLASH_ERASE = 0xc4


    def __init__(self):
        """ Create a new connection to a Camlink explorer firmware. """
        self.device = usb.core.find(idVendor=self.VENDOR_ID, idProduct=self.PRODUCT_ID)

        if self.device is None:
            raise IOError("could not find a device in exploration-firmware mode!")

        # Ensure that the device we've connected to is a valid CAMLINK explorer firmware.
        assert(self.get_firmware_id() == b"CAMLINK\0")


    def _in_request(self, request, length=0, index=0, value=0, timeout=3000):
        """ Performs a IN control request to the relevant firmware. """

        result = self.device.ctrl_transfer(self.REQUEST_TYPE_IN, request, value, index, length, timeout=timeout)
        return bytes(result)


    def _out_request(self, request, data=None, index=0, value=0, timeout=3000):
        """ Performs a IN control request to the relevant firmware. """
        self.device.ctrl_transfer(self.REQUEST_TYPE_OUT, request, value, index, data, timeout=timeout)


    def get_firmware_id(self):
        """ Returns a byte-string containing the firmware ID for the given explorer firmware. """
        return self._in_request(self.REQUEST_READ_ID, 8)


    def read_spi_flash_chunk(self, address, length=4096):
        """ reads up to 4096b of the device's spi flash. """
        return self._in_request(self.REQUEST_SPI_FLASH_READ, length=length, index=(address // 256))


    def write_spi_flash_chunk(self, address, data):
        """ Writes up to 4096B of the device's SPI flash. """
        self._out_request(self.REQUEST_SPI_FLASH_WRITE, data, index=(address // 256))
        self._wait_for_operation_complete()


    def dump_spi_flash(self, file_or_filename, start_address=0, length=None, progress_callback=None):
        """ Reads out the device's SPI flash. """

        address = start_address
        if length is None: 
            length = self.FLASH_SIZE

        if isinstance(file_or_filename, str):
            target = open(file_or_filename, "wb")
            close_after = True
        else:
            target = file_or_filename
            close_after = False

        while length > 0:
            data = self.read_spi_flash_chunk(address)
            target.write(data)

            length -= len(data)
            address += len(data)

            if progress_callback:
                progress_callback(address)

        if close_after:
            target.close()


    def erase_spi_flash_sector(self, address):
        """ Erases an SPI flash sector. """
        self._out_request(self.REQUEST_SPI_FLASH_ERASE, index=(address / self.FLASH_SECTOR_SIZE), value=1)
        self._wait_for_operation_complete()



    def erase_spi_flash(self, file_or_filename, start_address=0, length=None):
        """ Erases the device's SPI flash. """

        address = start_address
        if length is None:
            length = self.FLASH_SECTOR_SIZE - address

        while length > 0:
            self.erase_spi_flash_sector(address)
            address += self.FLASH_SECTOR_SIZE
            length -= self.FLASH_SECTOR_SIZE



    def write_spi_flash(self, file_or_filename, start_address=0, length=None, progress_callback=None):
        """ Reads out the device's SPI flash. """

        address = start_address
        if length is None: 
            length = self.FLASH_SIZE - address

        # Start off by erasing the device's SPI flash.
        self.erase_spi_flash(start_address, length)

        if isinstance(file_or_filename, str):
            target = open(file_or_filename, "rb")
            close_after = True
        else:
            target = file_or_filename
            close_after = False

        while length > 0:
            data = target.read(4096)
            self.write_spi_flash_chunk(address, data)

            length -= 4096
            address += len(data)

            if progress_callback:
                progress_callback(address)


        if close_after:
            target.close()


    def _flash_is_busy(self):
        """ Returns true for as long as the SPI flash is busy. """
        return (self._in_request(self.REQUEST_SPI_FLASH_BUSY, length=1) != b"\0")


    def _wait_for_operation_complete(self):
        """ Waits until the SPI flash reports being idle. """

        while self._flash_is_busy():
            pass


    def clear_boot_magic(self):
        """ Removes the CY boot magic from the target flash page; allowing us to boot to the Cypress bootloader. """

        # ... Read the first page...
        page_data = bytearray(self.read_spi_flash_chunk(0, length=256))

        # ... clear the first two bytes...
        page_data[0] = 0
        page_data[1] = 0

        # ... and write the data back.
        # Note that since we didn't perform an erase cycle, this should just zero out
        # the first two bytes. :)
        self.write_spi_flash_chunk(0, page_data)


    def read_fpga_id(self):
        return self._in_request(0x50, length=4)




#
# Main routines.
#

device = CamlinkExplorer()
print(device.read_fpga_id())
